AWSTemplateFormatVersion: '2010-09-09'
Description: 'Jenkins 2: highly available Jenkins master and dynamic agents, a cloudonaut.io template'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'EC2 Parameters'
      Parameters:
      - KeyName
      - IAMUserSSHAccess
      - SystemsManagerAccess
      - HostedZoneName
      - SubDomainNameWithDot
      - ManagedPolicyArns
    - Label:
        default: 'EFS Parameters'
      Parameters:
      - EFSBackupRetentionPeriod
      - EFSBackupScheduleExpression
    - Label:
        default: 'Master Parameters'
      Parameters:
      - MasterSubnetsReach
      - MasterELBScheme
      - MasterInstanceType
      - MasterAdminPassword
      - MasterLogsRetentionInDays
      - MasterVolumeSize
      - MasterLoadBalancerIdleTimeout
    - Label:
        default: 'Agent Parameters'
      Parameters:
      - AgentSubnetsReach
      - AgentInstanceType
      - AgentVolumeSize
      - AgentMaxSize
      - AgentMinSize
      - AgentMaxBuildWaitTimeInSeconds
      - AgentLogsRetentionInDays
  cfn-lint:
    config:
      ignore_checks:
        - W2001 #Parameter not used.
        - W8001 #Condition not used
        - W1020 #Sub isn't needed
        - W7001 #Mapping is defined but not used

Parameters:

  LatestAmiId:
    Type:  'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2' #ami-016b213e65284e9c9

  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the Jenkins master and agents.'
    Type: AWS::EC2::KeyPair::KeyName

  IAMUserSSHAccess: #TODO Figure out what this is doing.
    Description: 'Synchronize public keys of IAM users to enable personalized SSH access (Doc: https://cloudonaut.io/manage-aws-ec2-ssh-access-with-iam/).'
    Type: String
    Default: false
    AllowedValues:
    - true
    - false

  HostedZoneName:
    Description: 'Name of the HostedZone that matches HostedZoneId.'
    Type: String
    Default: 'org.paylease.com'

  SubDomainNameWithDot:
    Description: 'Name that is used to create the DNS entry with trailing dot, e.g. ยง{SubDomainNameWithDot}ยง{HostedZoneName}. Leave blank for naked (or apex and bare) domain. Requires ParentZoneStack parameter!'
    Type: String
    Default: 'jenkins.'

  SystemsManagerAccess:
    Description: 'Enable AWS Systems Manager agent and authorization.'
    Type: String
    Default: true

  MasterSubnetsReach:
    Description: 'Should the master have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: Private

  MasterELBScheme:
    Description: 'Indicates whether the load balancer in front of the Jenkins master is Internet-facing or internal.'
    Type: String
    Default: internal

  MasterInstanceType:
    Description: 'The instance type of the Jenkins master.'
    Type: String
    Default: 't3.xlarge'

  MasterAdminPassword:
    Description: 'A password for the Jenkins master admin. Must not be changed!'
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 32

  MasterLogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  MasterVolumeSize:
    Description: 'The root volume size, in Gibibytes (GiB). Keep in mind that Jenkins home lives on EFS.'
    Type: Number
    Default: 8
    ConstraintDescription: 'Must be in the range [8-1024]'
    MinValue: 8
    MaxValue: 1024

  MasterLoadBalancerIdleTimeout:
    Description: 'The idle timeout value, in seconds.'
    Type: Number
    Default: 60
    MinValue: 1
    MaxValue: 4000

  AgentSubnetsReach:
    Description: 'Should the agents have direct access to the Internet or do you prefer private subnets with NAT?'
    Type: String
    Default: Private

  AgentInstanceType:
    Description: 'The instance type of the Jenkins agents.'
    Type: String
    Default: 't2.micro'

  AgentVolumeSize:
    Description: 'The root volume size, in Gibibytes (GiB). Keep in mind that Jenkins home lives on EFS.'
    Type: Number
    Default: 8
    ConstraintDescription: 'Must be in the range [8-1024]'
    MinValue: 8
    MaxValue: 1024

  AgentMaxSize:
    Description: 'The maximum size of the agents Auto Scaling group.'
    Type: Number
    Default: 2
    ConstraintDescription: 'Must be >= 1'
    MinValue: 1

  AgentMinSize:
    Description: 'The minimum size of the agents Auto Scaling group.'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be >= 0'
    MinValue: 0

  AgentMaxBuildWaitTimeInSeconds:
    Description: 'Maximum time in seconds an agent can continue with a build although it should be scaled down.'
    Type: Number
    Default: 600
    ConstraintDescription: 'Must be in the range [600-7200]'
    MinValue: 600
    MaxValue: 7200

  AgentLogsRetentionInDays:
    Description: 'Specifies the number of days you want to retain log events in the specified log group.'
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  ManagedPolicyArns:
    Description: 'Optional comma-delimited list of IAM managed policy ARNs to attach to the instance''s IAM role'
    Type: String
    Default: ''

  EFSBackupRetentionPeriod:
    Description: 'The number of days to keep backups of the EFS file system (set to 0 to disable).'
    Type: Number
    MinValue: 0
    MaxValue: 35
    Default: 30

  EFSBackupScheduleExpression:
    Description: 'A CRON expression specifying when AWS Backup initiates a backup job.'
    Type: String
    Default: 'cron(0 5 ? * * *)'

Mappings:
  RegionMap:
    'us-east-2':
      AMI: 'ami-0e01ce4ee18447327'


Conditions:
  HasZeroAgents: !Equals [!Ref AgentMinSize, '0']
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasIAMUserSSHAccess: !Equals [!Ref IAMUserSSHAccess, 'true']
  HasSystemsManagerAccess: !Equals [!Ref SystemsManagerAccess, 'true']
  HasMasterELBSchemeInternal: !Equals [!Ref MasterELBScheme, 'internal']
  HasManagedPolicyArns: !Not [!Equals [!Ref ManagedPolicyArns, '']]
  HasEFSBackupRetentionPeriod: !Not [!Equals [!Ref EFSBackupRetentionPeriod, 0]]

Resources:
  MasterStorageSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-master'
      VpcId: !ImportValue vpc-id
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref MasterSG
        FromPort: 2049
        ToPort: 2049
        IpProtocol: tcp

  MasterStorage:
    Type: 'AWS::EFS::FileSystem'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 #Ignore Set explicit values for UpdateReplacePolicy / DeletionPolicy
    Properties:
      ThroughputMode: bursting
      FileSystemTags:
      - Key: Name
        Value: 'jenkins-master-storage'
      PerformanceMode: generalPurpose

  SNSJenkinsMasterAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: jenkins-master-alerts
      Subscription:
        - Endpoint: nrediehs@gozego.com #ToDo Replace with alias email address
          Protocol: email

  MasterStorageBurstCreditBalanceTooLowAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Average burst credit balance over last 10 minutes too low, expect a significant performance drop soon.'
      Namespace: 'AWS/EFS'
      MetricName: BurstCreditBalance
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: LessThanThreshold
      Threshold: 192000000000 # 192 GB in Bytes (last hour where you can burst at 100 MB/sec)
      AlarmActions:
      - !Ref SNSJenkinsMasterAlertTopic
      Dimensions:
      - Name: FileSystemId
        Value: !Ref MasterStorage

  MasterStoragePercentIOLimitTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'I/O limit has been reached, consider using Max I/O performance mode.'
      Namespace: 'AWS/EFS'
      MetricName: PercentIOLimit
      Statistic: Maximum
      Period: 600
      EvaluationPeriods: 3
      ComparisonOperator: GreaterThanThreshold
      Threshold: 95
      AlarmActions:
      - !Ref SNSJenkinsMasterAlertTopic
      Dimensions:
      - Name: FileSystemId
        Value: !Ref MasterStorage

  MasterStorageMountTargetA:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MasterStorage
      SecurityGroups:
      - !Ref MasterStorageSG
      SubnetId: !ImportValue private-az-a-subnet

  MasterStorageMountTargetB:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MasterStorage
      SecurityGroups:
      - !Ref MasterStorageSG
      SubnetId: !ImportValue private-az-b-subnet

  MasterELBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-elb-master'
      VpcId: !ImportValue vpc-id
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "10.102.0.0/24"
          Description: https-traffic-from-sd-att-vpn-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "10.100.0.0/20"
          Description: https-traffic-from-sandiego-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "10.101.0.0/20"
          Description: https-traffic-from-sd-inscope-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "192.168.4.0/24"
          Description: https-traffic-from-sd-vpn-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "10.100.100.0/22"
          Description: https-traffic-from-okta-sd-vpn-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "192.168.5.0/24"
          Description: https-traffic-from-sd-pci-vpn-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "10.100.200.0/24"
          Description: https-traffic-from-okta-sd-pci-vpn-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "10.25.0.0/16"
          Description: https-traffic-from-aws-dev-network
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "10.24.0.0/16"
          Description: https-traffic-from-aws-org-network

  MasterHTTPCodeELB5XXTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer returns 5XX HTTP status codes'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_ELB_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref SNSJenkinsMasterAlertTopic
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
      TreatMissingData: notBreaching

  MasterHTTPCodeTarget5XXTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer receives 5XX HTTP status codes from targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: HTTPCode_Target_5XX_Count
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref SNSJenkinsMasterAlertTopic
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
      TreatMissingData: notBreaching

  MasterRejectedConnectionCountTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer rejected connections because the load balancer had reached its maximum number of connections'
      Namespace: 'AWS/ApplicationELB'
      MetricName: RejectedConnectionCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref SNSJenkinsMasterAlertTopic
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
      TreatMissingData: notBreaching

  MasterTargetConnectionErrorCountTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Application load balancer could not connect to targets'
      Namespace: 'AWS/ApplicationELB'
      MetricName: TargetConnectionErrorCount
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions:
      - !Ref SNSJenkinsMasterAlertTopic
      Dimensions:
      - Name: LoadBalancer
        Value: !GetAtt MasterELB.LoadBalancerFullName
      TreatMissingData: notBreaching

  RecordSet:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      AliasTarget:
        HostedZoneId: !GetAtt 'MasterELB.CanonicalHostedZoneID'
        DNSName: !GetAtt 'MasterELB.DNSName'
      HostedZoneId: Z2MW3ZBPTS81T9
      Name: !Sub
      - '${SubDomainNameWithDot}${HostedZoneName}'
      - SubDomainNameWithDot: !Ref SubDomainNameWithDot
        HostedZoneName: !Ref HostedZoneName
      Type: A

  MasterELB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerAttributes:
      - Key: 'idle_timeout.timeout_seconds'
        Value: !Ref MasterLoadBalancerIdleTimeout
      - Key: 'routing.http2.enabled'
        Value: 'true'
      Scheme: !Ref MasterELBScheme
      SecurityGroups:
      - !Ref MasterELBSG
      Subnets:
        - !ImportValue private-az-a-subnet
        - !ImportValue private-az-b-subnet
      Tags:
      - Key: Name
        Value: 'jenkins-master'

  MasterELBTargetGroup: # not monitored, but MasterELB is monitored!
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 180
      HealthCheckPath: '/login'
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 120
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: '200-299'
      Port: 8080
      Protocol: HTTP
      Tags:
      - Key: Name
        Value: 'jenkins-master'
      VpcId: !ImportValue vpc-id
      TargetGroupAttributes:
      - Key: 'deregistration_delay.timeout_seconds'
        Value: '60'

  MasterELBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      Certificates:
      - CertificateArn: arn:aws:acm:us-east-2:489055453904:certificate/e4cf121b-53d5-45d7-b54f-a1f08181cd3b
      DefaultActions:
      - TargetGroupArn: !Ref MasterELBTargetGroup
        Type: forward
      LoadBalancerArn: !Ref MasterELB
      Port: 443
      Protocol: HTTPS

  MasterIP:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
      - !Ref MasterIAMRole

  MasterIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      ManagedPolicyArns: !If [HasManagedPolicyArns, !Split [',', !Ref ManagedPolicyArns], !Ref 'AWS::NoValue']
      Policies:
      - !If
        - HasSystemsManagerAccess
        - PolicyName: ssm
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 'ssmmessages:*' # SSM Agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
              - 'ssm:UpdateInstanceInformation' # SSM agent by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
              - 'ec2messages:*' # SSM Session Manager by https://docs.aws.amazon.com/systems-manager/latest/userguide/systems-manager-setting-up-messageAPIs.html
              Resource: '*'
        - !Ref 'AWS::NoValue'
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action: 'cloudwatch:PutMetricData'
            Resource: '*'
      - PolicyName: route53
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action: 'route53:ChangeResourceRecordSets'
            Resource: 'arn:aws:route53:::hostedzone/Z2MW3ZBPTS81T9'
      - PolicyName: autoscaling
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action: 'autoscaling:CompleteLifecycleAction'
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'logs:CreateLogGroup'
            - 'logs:CreateLogStream'
            - 'logs:PutLogEvents'
            - 'logs:DescribeLogStreams'
            Resource: !GetAtt 'MasterLogs.Arn'
      - PolicyName: sts
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: 'sts:AssumeRole'
            Resource: '*'

      - PolicyName: JenkinsBuilderPermissions
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeSpotInstanceRequests
            - ec2:CancelSpotInstanceRequests
            - ec2:GetPasswordData
            - ec2:GetConsoleOutput
            - ec2:RequestSpotInstances
            - ec2:RunInstances
            - ec2:StartInstances
            - ec2:StopInstances
            - ec2:TerminateInstances
            - ec2:CreateTags
            - ec2:DeleteTags
            - ec2:DescribeInstances
            - ec2:DescribeKeyPairs
            - ec2:DescribeRegions
            - ec2:DescribeImages
            - ec2:DescribeAvailabilityZones
            - ec2:DescribeSecurityGroups
            - ec2:DescribeSubnets
            - iam:ListInstanceProfilesForRole
            - iam:PassRole
            Resource: '*'

  MasterSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-master'
      VpcId: !ImportValue vpc-id
      SecurityGroupIngress:
      - SourceSecurityGroupId: !Ref MasterELBSG
        FromPort: 8080
        ToPort: 8080
        IpProtocol: tcp

  MasterLogs:
    Type: 'AWS::Logs::LogGroup'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 #Ignore Set explicit values for UpdateReplacePolicy / DeletionPolicy
    Properties:
      RetentionInDays: !Ref MasterLogsRetentionInDays
  MasterLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W4002 #Ignore NoEcho error
      'AWS::CloudFormation::Init':
        configSets:
          default: [awslogs, !If [HasIAMUserSSHAccess, ssh-access, !Ref 'AWS::NoValue'], mount, extras, install, setup, add_route53, custom_before, run]
        awslogs:
          packages:
            yum:
              awslogs: []
          files:
            '/etc/awslogs/awscli.conf':
              content: !Sub |
                [default]
                region = ${AWS::Region}
                [plugins]
                cwlogs = cwlogs
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/awslogs.conf':
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state
                [/var/log/amazon/ssm/amazon-ssm-agent.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/amazon-ssm-agent.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/amazon-ssm-agent.log
                log_group_name = ${MasterLogs}
                [/var/log/amazon/ssm/errors.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/ssm/errors.log
                log_stream_name = {instance_id}/var/log/amazon/ssm/errors.log
                log_group_name = ${MasterLogs}
                [/var/log/audit/audit.log]
                file = /var/log/audit/audit.log
                log_stream_name = {instance_id}/var/log/audit/audit.log
                log_group_name = ${MasterLogs}
                [/var/log/awslogs.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/awslogs.log
                log_stream_name = {instance_id}/var/log/awslogs.log
                log_group_name = ${MasterLogs}
                [/var/log/boot.log]
                file = /var/log/boot.log
                log_stream_name = {instance_id}/var/log/boot.log
                log_group_name = ${MasterLogs}
                [/var/log/cfn-hup.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-hup.log
                log_stream_name = {instance_id}/var/log/cfn-hup.log
                log_group_name = ${MasterLogs}
                [/var/log/cfn-init-cmd.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init-cmd.log
                log_stream_name = {instance_id}/var/log/cfn-init-cmd.log
                log_group_name = ${MasterLogs}
                [/var/log/cfn-init.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-init.log
                log_stream_name = {instance_id}/var/log/cfn-init.log
                log_group_name = ${MasterLogs}
                [/var/log/cfn-wire.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/cfn-wire.log
                log_stream_name = {instance_id}/var/log/cfn-wire.log
                log_group_name = ${MasterLogs}
                [/var/log/cloud-init-output.log]
                file = /var/log/cloud-init-output.log
                log_stream_name = {instance_id}/var/log/cloud-init-output.log
                log_group_name = ${MasterLogs}
                [/var/log/cloud-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cloud-init.log
                log_stream_name = {instance_id}/var/log/cloud-init.log
                log_group_name = ${MasterLogs}
                [/var/log/cron]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cron
                log_stream_name = {instance_id}/var/log/cron
                log_group_name = ${MasterLogs}
                [/var/log/dmesg]
                file = /var/log/dmesg
                log_stream_name = {instance_id}/var/log/dmesg
                log_group_name = ${MasterLogs}
                [/var/log/grubby_prune_debug]
                file = /var/log/grubby_prune_debug
                log_stream_name = {instance_id}/var/log/grubby_prune_debug
                log_group_name = ${MasterLogs}
                [/var/log/maillog]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/maillog
                log_stream_name = {instance_id}/var/log/maillog
                log_group_name = ${MasterLogs}
                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                log_stream_name = {instance_id}/var/log/messages
                log_group_name = ${MasterLogs}
                [/var/log/secure]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/secure
                log_stream_name = {instance_id}/var/log/secure
                log_group_name = ${MasterLogs}
                [/var/log/yum.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/yum.log
                log_stream_name = {instance_id}/var/log/yum.log
                log_group_name = ${MasterLogs}
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/config/efs.conf':
              content: !Sub |
                [/var/log/amazon/efs/mount.log]
                datetime_format = %Y-%m-%d %H:%M:%S
                file = /var/log/amazon/efs/mount.log
                log_stream_name = {instance_id}/var/log/amazon/efs/mount.log
                log_group_name = ${MasterLogs}
              mode: '000644'
              owner: root
              group: root
            '/etc/awslogs/config/jenkins-master.conf':
              content: !Sub |
                [/var/log/jenkins/jenkins.log]
                datetime_format = %d %b %Y %H:%M:%S
                multi_line_start_pattern = {datetime_format}
                file = /var/log/jenkins/jenkins.log
                log_stream_name = {instance_id}/var/log/jenkins/jenkins.log
                log_group_name = ${MasterLogs}
              mode: '000644'
              owner: root
              group: root
          services:
            sysvinit:
              awslogsd:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - awslogs
                files:
                - '/etc/awslogs/awslogs.conf'
                - '/etc/awslogs/awscli.conf'
                - '/etc/awslogs/config/efs.conf'
                - '/etc/awslogs/config/jenkins-master.conf'
        mount:
          packages:
            yum:
              'amazon-efs-utils': []
          commands:
            'a_groupadd':
              command: 'groupadd -g 497 jenkins'
              test: 'if grep -q jenkins: /etc/group; then exit 1; else exit 0; fi'
            'b_useradd':
              command: 'adduser -u 498 -g 497 -s /bin/false -d /var/lib/jenkins -M -c ''Jenkins Continuous Integration Server'' jenkins'
              test: 'if grep -q jenkins: /etc/passwd; then exit 1; else exit 0; fi'
            'c_mount':
              command: !Sub 'mkdir /var/lib/jenkins && chown -R jenkins:jenkins /var/lib/jenkins && echo "${MasterStorage}:/ /var/lib/jenkins efs tls,_netdev 0 0" >> /etc/fstab && mount -a -t efs'
              test: '[ ! -d /var/lib/jenkins ]'
        extras:
          commands:
            'a_enable_docker':
              command: 'amazon-linux-extras enable docker=18.06.1'
              test: "! grep -Fxq '[amzn2extra-docker]' /etc/yum.repos.d/amzn2-extras.repo"
            'b_enable_corretto8':
              command: 'amazon-linux-extras enable corretto8'
              test: "! grep -Fxq '[amzn2extra-corretto8]' /etc/yum.repos.d/amzn2-extras.repo"
            'c_enable_ruby26':
              command: 'amazon-linux-extras enable ruby2.6'
              test: "! grep -Fxq '[amzn2extra-ruby2.6]' /etc/yum.repos.d/amzn2-extras.repo"
        install:
          packages:
            rpm:
              jenkins: 'https://get.jenkins.io/redhat/jenkins-2.419-1.1.noarch.rpm'
            yum:
              'java-11-amazon-corretto-headless': []
              'ruby': []
            # rubygems:
            #   'aws-sdk-autoscaling': ['1.13.0']
            #   'aws-sdk-sqs': ['1.10.0']
            #   daemons: ['1.2.6']
          commands:
            'a_install_asg_gem':
              command: 'gem install aws-sdk-autoscaling -v 1.13.0'
            'b_install_sqs_gem':
              command: 'gem install aws-sdk-sqs -v 1.10.0'
            'c_install_sqs_gem':
              command: 'gem install daemons -v 1.2.6'
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MasterLC.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=MasterLC
                runas=root
            '/etc/init.d/lifecycle-poller':
              content: |
                #!/usr/bin/env ruby
                # chkconfig:    - 80 20
                APP_NAME = 'lifecycle-poller'
                APP_PATH = '/opt/lifecycle-poller/daemon.rb'
                case ARGV.first
                  when 'start'
                    puts "Starting #{APP_NAME}..."
                    system(APP_PATH, 'start')
                    exit($?.exitstatus)
                  when 'stop'
                    system(APP_PATH, 'stop')
                    exit($?.exitstatus)
                  when 'restart'
                    system(APP_PATH, 'restart')
                    exit($?.exitstatus)
                  when 'status'
                    system(APP_PATH, 'status')
                    exit($?.exitstatus)
                end
                unless %w{start stop restart status}.include? ARGV.first
                  puts "Usage: #{APP_NAME} {start|stop|restart|status}"
                  exit(1)
                end
              mode: '000755'
              owner: root
              group: root
            '/opt/lifecycle-poller/daemon.rb':
              content: |
                #!/usr/bin/env ruby
                require 'daemons'
                Daemons.run(__dir__ + '/worker.rb', {:monitor => true, :log_output_syslog => true})
              mode: '000500'
              owner: root
              group: root
            '/opt/lifecycle-poller/worker.rb':
              content: |
                #!/usr/bin/env ruby
                require 'net/http'
                require 'aws-sdk-autoscaling'
                require 'aws-sdk-sqs'
                require 'json'
                require 'uri'
                require 'yaml'
                require 'syslog/logger'
                $log = Syslog::Logger.new 'poller'
                $conf = YAML::load_file(__dir__ + '/poller.conf')
                Aws.config.update(region: $conf['region'])
                $log.info 'poller started'
                def takeAgentTemporarilyOffline(agent)
                  # sterr is forwarded to sdout to get the information in ruby
                  out=`java -jar /opt/jenkins-cli.jar -s http://localhost:8080 -auth 'admin:#{$conf['masterAdminPassword']}' offline-node #{agent} -m 'scale down' 2>&1`
                  if $?.exitstatus == 0
                    $log.info "agent #{agent} is marked as offline"
                    return true
                  else
                    if out.include? "ERROR: No such agent"
                      $log.info "agent #{agent} could not be marked as offline, it already is deleted: #{out}"
                      return true
                    else
                      $log.error "agent #{agent} could not be marked as offline: #{out}"
                      return false
                    end
                  end
                end
                def deleteAgent(agent)
                  # sterr is forwarded to sdout to get the information in ruby
                  out=`java -jar /opt/jenkins-cli.jar -s http://localhost:8080 -auth 'admin:#{$conf['masterAdminPassword']}' delete-node #{agent} 2>&1`
                  if $?.exitstatus == 0
                    $log.info "agent #{agent} is deleted"
                    return true
                  else
                    if out.include? "ERROR: No such node"
                      $log.info "agent #{agent} could not be deleted, it already is deleted: #{out}"
                      return true
                    else
                      $log.error "agent #{agent} could not be deleted: #{out}"
                      return false
                    end
                  end
                end
                def isAgentIdle(agent)
                  url = URI.parse("http://localhost:8080/computer/#{agent}/api/xml")
                  req = Net::HTTP::Get.new(url.to_s)
                  req.basic_auth('admin', $conf['masterAdminPassword'])
                  res = Net::HTTP.start(url.host, url.port) {|http|
                    http.request(req)
                  }
                  if res.code == '200'
                    if res.body.include? '<idle>true</idle>'
                      return true
                    elsif res.body.include? '<idle>false</idle>'
                      return false
                    else
                      $log.error "unexpected body: #{res.body}"
                      return false
                    end
                  elsif res.code == '404'
                    return true
                  else
                    $log.error "unexpected response code: #{res.code}"
                    return false
                  end
                end
                def awaitAgentIdle(poller, message, agent)
                  endTime = Time.now.to_i + $conf['maxWaitInSeconds']
                  while Time.now.to_i < endTime do
                    if isAgentIdle agent
                      $log.info "agent #{agent} is idle"
                      return true
                    end
                    poller.change_message_visibility_timeout(message, 30)
                    sleep 15 # seconds
                  end
                  $log.error "agent #{agent} is not idle, but wait time elapsed"
                  return false
                end
                def completeLifecycleAction(token, hook, asg)
                  begin
                    autoscaling = Aws::AutoScaling::Client.new()
                    autoscaling.complete_lifecycle_action(
                      lifecycle_hook_name: hook,
                      auto_scaling_group_name: asg,
                      lifecycle_action_token: token,
                      lifecycle_action_result: 'CONTINUE'
                    )
                    $log.info "Lifecycle action completed"
                    return true
                  rescue Exception => e
                    if e.code == 'ValidationError'
                      $log.info "Lifecycle action failed validation: #{e.inspect}"
                      return true
                    else
                      raise e
                    end
                  end
                end
                def pollSQS()
                  poller = Aws::SQS::QueuePoller.new($conf['queueUrl'])
                  poller.poll do |msg|
                    begin
                      body = JSON.parse(msg.body)
                      $log.debug "message #{body}"
                      if body['Event'] == 'autoscaling:TEST_NOTIFICATION'
                        $log.info 'received test notification'
                      else
                        if body['LifecycleTransition'] == 'autoscaling:EC2_INSTANCE_TERMINATING'
                          $log.info "lifecycle transition for agent #{body['EC2InstanceId']}"
                          takeAgentTemporarilyOffline body['EC2InstanceId']
                          awaitAgentIdle poller, msg, body['EC2InstanceId']
                          deleteAgent body['EC2InstanceId']
                          completeLifecycleAction body['LifecycleActionToken'], body['LifecycleHookName'], body['AutoScalingGroupName']
                        else
                          $log.error "received unsupported lifecycle transition: #{body['LifecycleTransition']}"
                        end
                      end
                    rescue Exception => e
                      $log.error "message failed: #{e.inspect} #{msg.inspect}"
                      raise e
                    end
                  end
                end
                def awaitFile(file)
                  endTime = Time.now.to_i + $conf['maxWaitInSeconds']
                  while Time.now.to_i < endTime do
                    if File.exist? file
                      $log.info "file #{file} exists"
                      return true
                    end
                    sleep 5 # seconds
                  end
                  $log.error "file #{file} is not available, but wait time elapsed"
                  return false
                end
                awaitFile('/opt/jenkins-cli.jar')
                pollSQS
              mode: '000500'
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'
              amazon-ssm-agent:
                enabled: !If [HasSystemsManagerAccess, true, false]
                ensureRunning: !If [HasSystemsManagerAccess, true, false]
              lifecycle-poller:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/init.d/lifecycle-poller'
                - '/opt/lifecycle-poller/poller.conf'
                - '/opt/lifecycle-poller/daemon.rb'
                - '/opt/lifecycle-poller/worker.rb'
        setup:
          files:
            '/root/plugins.txt':
              content: |
                jqs-monitoring
                ant
                build-timeout
                docker-workflow
                credentials-binding
                email-ext
                envinject
                github-organization-folder
                gradle
                workflow-aggregator
                pipeline-maven
                ssh-slaves
                subversion
                timestamper
                ws-cleanup
                pipeline-aws
                http_request
              mode: '000400'
              owner: root
              group: root

          commands:
            # only run all of the commands in this block if this setup hasn't
            # already been completed, i.e. if /var/lib/jenkins/setup_done.txt
            # doesn't exist
            'a_start_jenkins':
              command: 'systemctl start jenkins'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'b_await_jenkins':
              command: 'until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/); do printf "."; sleep 1; done'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'c_download_cli':
              command: 'curl -s -m 60 -o /opt/jenkins-cli.jar -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/jnlpJars/jenkins-cli.jar'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'd_activate_slave_agent_port':
              command: 'sed -i -e "s@<slaveAgentPort>.*</slaveAgentPort>@<slaveAgentPort>49817</slaveAgentPort>@" /var/lib/jenkins/config.xml'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'e_disable_master_executors':
              command: 'sed -i -e "s@<numExecutors>.*</numExecutors>@<numExecutors>0</numExecutors>@" /var/lib/jenkins/config.xml'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'f_set_label':
              command: 'sed -i -e "s@<label>.*</label>@<label>master</label>@" /var/lib/jenkins/config.xml'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'g_restart_jenkins':
              command: 'systemctl restart jenkins'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'h_await_jenkins':
              command: 'until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/); do printf "."; sleep 1; done'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'i_install_plugins':
              command: 'java -jar /opt/jenkins-cli.jar -s "http://localhost:8080/" -auth "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" install-plugin $(cat /root/plugins.txt | tr "\n" " ")'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'j_start_jenkins_1':
              command: 'systemctl stop jenkins'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'j_start_jenkins_2':
              command: 'systemctl start jenkins'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'k_await_jenkins':
              command: 'until $(curl -s -m 60 -o /dev/null -I -f -u "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" http://localhost:8080/cli/); do printf "."; sleep 1; done'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'l_set_admin_password':
              command: !Sub 'echo $''jenkins.model.Jenkins.instance.securityRealm.createAccount("admin", \''${MasterAdminPassword}\'')'' | java -jar /opt/jenkins-cli.jar -s "http://localhost:8080/" -auth "admin:$(cat /var/lib/jenkins/secrets/initialAdminPassword)" groovy ='
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'm_stop_jenkins':
              command: 'systemctl stop jenkins'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
            'x_create_setup_done_file':
              command: 'echo "Setup done. Do not delete this file." > /var/lib/jenkins/setup_done.txt'
              test: '[ ! -f /var/lib/jenkins/setup_done.txt ]'
        add_route53:
          files:
            '/usr/local/src/update-route53.sh':
              content: !Sub |
                #!/bin/bash
                PRIVATE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)
                DOMAIN_NAME="org.paylease.com"
                HOSTED_ZONE_ID="Z2MW3ZBPTS81T9"
                HOSTNAME="jenkins-master.$DOMAIN_NAME"
                JSON=$(cat << EOF
                {
                  "Changes":[
                    {
                      "Action":"UPSERT",
                      "ResourceRecordSet":{
                        "Name": "$HOSTNAME",
                        "Type": "A",
                        "TTL": 900,
                        "ResourceRecords": [
                          {
                            "Value":"$PRIVATE_IP"
                          }
                        ]
                      }
                    }
                  ]
                }
                EOF
                )
                hostnamectl set-hostname "$HOSTNAME"
                aws route53 change-resource-record-sets --hosted-zone-id "$HOSTED_ZONE_ID" --change-batch "$JSON"
              mode: '000700'
              owner: root
              group: root
          commands:
            '01_update_route53':
              command: /usr/local/src/update-route53.sh
        custom_before:
          packages:
            yum:
              git: []
              docker: []
          commands:
            'a_add_to_docker_group':
              command: 'usermod -a -G docker jenkins'
          services:
            sysvinit:
              docker:
                enabled: true
                ensureRunning: true
                packages:
                  yum:
                  - docker
        run:
          services:
            sysvinit:
              jenkins:
                enabled: true
                #ensureRunning: true
                packages:
                  rpm:
                  - jenkins
          commands:
            'restart_jenkins_after_boot_1':
                command: 'systemctl stop jenkins'
            'restart_jenkins_after_boot_2':
                command: 'systemctl start jenkins'

    Properties:
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref MasterIP
      InstanceType: !Ref MasterInstanceType
      SecurityGroups:
      - !Ref MasterSG
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
      - DeviceName: '/dev/xvda'
        Ebs:
          VolumeSize: !Ref MasterVolumeSize
          VolumeType: gp2
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterLC --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MasterASG --region ${AWS::Region}
  MasterASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    DependsOn:
    - MasterStorageMountTargetA
    - MasterStorageMountTargetB
    Properties:
      LaunchConfigurationName: !Ref MasterLC
      MinSize: '1'
      MaxSize: '1'
      HealthCheckGracePeriod: 900
      HealthCheckType: ELB
      NotificationConfigurations:
        - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN: !Ref SNSJenkinsMasterAlertTopic
      VPCZoneIdentifier:
      - !ImportValue private-az-a-subnet
      - !ImportValue private-az-b-subnet
      TargetGroupARNs:
      - !Ref MasterELBTargetGroup
      Tags:
      - Key: Name
        Value: 'jenkins-master'
        PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        PauseTime: PT30M
        SuspendProcesses:
        - HealthCheck
        - ReplaceUnhealthy
        - AZRebalance
        - AlarmNotification
        - ScheduledActions
        WaitOnResourceSignals: true
  MasterCPUTooHighAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Master average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - !Ref SNSJenkinsMasterAlertTopic
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref MasterASG

  AgentSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'jenkins-agent'
      VpcId: !ImportValue vpc-id
      SecurityGroupIngress:
      - FromPort: 445
        ToPort: 445
        IpProtocol: tcp
      - FromPort: 5985
        ToPort: 5985
        IpProtocol: tcp

  BackupVault: # cannot be deleted with data
    Type: 'AWS::Backup::BackupVault'
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3011 #Ignore Set explicit values for UpdateReplacePolicy / DeletionPolicy
    Properties:
      BackupVaultName: !Ref 'AWS::StackName'
      Notifications:
        BackupVaultEvents: [BACKUP_JOB_STARTED, BACKUP_JOB_COMPLETED, RESTORE_JOB_STARTED, RESTORE_JOB_COMPLETED, RECOVERY_POINT_MODIFIED]
        SNSTopicArn: !Ref SNSJenkinsMasterAlertTopic

  BackupPlan:
    Type: 'AWS::Backup::BackupPlan'
    Properties:
      BackupPlan:
        BackupPlanName: !Ref 'AWS::StackName'
        BackupPlanRule:
        - CompletionWindowMinutes: 1440
          Lifecycle:
            DeleteAfterDays: !Ref EFSBackupRetentionPeriod
          RuleName: !Ref 'AWS::StackName'
          ScheduleExpression: !Ref EFSBackupScheduleExpression
          StartWindowMinutes: 60
          TargetBackupVault: !Ref BackupVault

  BackupRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'backup.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: backup
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'elasticfilesystem:Backup'
            - 'elasticfilesystem:DescribeTags'
            Resource: !Sub 'arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${MasterStorage}'

  BackupSelection:
    Type: 'AWS::Backup::BackupSelection'
    Properties:
      BackupPlanId: !Ref BackupPlan
      BackupSelection:
        IamRoleArn: !GetAtt 'BackupRole.Arn'
        Resources:
        - !Sub 'arn:${AWS::Partition}:elasticfilesystem:${AWS::Region}:${AWS::AccountId}:file-system/${MasterStorage}'
        SelectionName: !Ref 'AWS::StackName'

  JenkinsBuilderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: JenkinsBuilderRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: 'ec2.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: AssumeJenkinsStartStopRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'sts:AssumeRole'
            Resource:
              - arn:aws:iam::877656243468:role/JenkinsStartStopRole
              - arn:aws:iam::997326064572:role/JenkinsStartStopRole
              - arn:aws:iam::597632436094:role/JenkinsStartStopRole
              - arn:aws:iam::733276539406:role/JenkinsStartStopRole

  JenkinsBuilderProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: JenkinsBuilderProfile
      Roles:
        - !Ref JenkinsBuilderRole

Outputs:
  AdminUsername:
    Description: 'User name for the Jenkins admin.'
    Value: admin
    Export:
      Name: !Sub '${AWS::StackName}-AdminUsername'
  DNSName:
    Description: 'The DNS name for the Jenkins Master load balancer.'
    Value: !GetAtt 'MasterELB.DNSName'
    Export:
      Name: !Sub '${AWS::StackName}-DNSName'
  URL:
    Description: 'URL to the Jenkins Master.'
    Value: !Sub 'http://${MasterELB.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-URL'
