AWSTemplateFormatVersion: '2010-09-09'
Description: This is the base cloudformation for all of the UAT and Production ec2 instances
Metadata:
 cfn-lint:
   config:
     regions:
       - us-east-2
     ignore_checks:
       - W2506
Mappings:
 EnvironmentMap:
   # Production Account
   '733276539406':
     Environment: production
     AlbSg: sg-0cb61c71d227d6352
     CidrIp: 10.23.0.0/16


   # UAT Account
   '997326064572':
     Environment: uat
     AlbSg: sg-05147b3995c2564c3
     CidrIp: 10.21.0.0/16


   #Sandbox Account
   '597632436094':
     Environment: sandbox
     AlbSg: AWS::NoValue
     CidrIp: 10.22.0.0/16


   #Development Account
   '877656243468':
     Environment: development
     AlbSg: AWS::NoValue
     CidrIp: 10.25.0.0/16


Parameters:
 KeyPair:
   Type: AWS::EC2::KeyPair::KeyName
 InstanceType:
   Type: String
   Default: t3.large
 AmiVersion:
   Type : String #'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
   Default: ami-0e659f17afb998b70
 OctopusDNSName:
   Type: String
   AllowedValues: ["Web1Uat","Web2Uat","IntwebUat","Web3Uat","EngServicesUat","ProdServicesUAT", "Web1Prod","Web2Prod","IntwebProd","Web3Prod","EngServicesProd","ProdServicesProd"]
 PrivateSubnet:
     Type: String
     AllowedValues: ["private-az-a-subnet","private-az-b-subnet","private-az-c-subnet"]
 # HostedZoneName:
 #   Type: String
 #   Default: ociusprod.com.
 OctopusRoles:
   Type: String
   Default: "Demo"
 OctopusEnvironment:
   Type: String
   Default: "UAT"
 PCI:
   Description: Defines whether key will be Pci or Non-Pci
   Type: String
   AllowedValues:
     - 'non-pci'
     - 'pci'
 Business:
   Description: Defines business unit that key will be used for
   Type: String
   Default: billing
   AllowedValues:
     - 'Payments'
     - 'Billing'
     - 'Utility'
     - 'Engage'
     - 'Shared'
     - 'billing'
 Role:
   Description: The role of the server
   Type: String
   Default: WebApp
   AllowedValues:
     - WebApp
     - Db
     - K8s
     - DockerSwarm
     - Batch
     - DataWarehouse
     - Support
 TargetGroupArn:
   Type: String
   AllowedValues:
     - 'arn:aws:elasticloadbalancing:us-east-2:997326064572:targetgroup/billing-target-group-uat/e12a95bccbe273a2'
     - 'arn:aws:elasticloadbalancing:us-east-2:733276539406:targetgroup/billing-target-group-production/b8be4b6c0ac3778b'
Conditions:
 IsPci:
   !Equals ["pci", !Ref "PCI"]
 IsWeb1Uat:
   Fn::Equals:
   -  Ref: OctopusDNSName
   - 'Web1Uat'
 IsWeb3Uat:
   Fn::Equals:
   - Ref: OctopusDNSName
   - 'Web3Uat'
 IsWeb1Prod:
   Fn::Equals:
   - Ref: OctopusDNSName
   - 'Web1Prod'
 IsWeb3Prod:
   Fn::Equals:
   - Ref: OctopusDNSName
   - 'Web3Prod'
 IsWebInstance: {"Fn::Or": [{"Condition": "IsWeb1Uat"}, {"Condition": "IsWeb3Uat" }, {"Condition": "IsWeb3Prod"}, {"Condition": "IsWeb1Prod" } ]}
 IsIntwebUat:
   Fn::Equals:
   - Ref: OctopusDNSName
   - 'IntwebUat'
 IsEngServicesUat:
   Fn::Equals:
   - Ref: OctopusDNSName
   - 'EngServicesUat'
 IsIntwebProd:
   Fn::Equals:
   - Ref: OctopusDNSName
   - 'IntwebProd'
 IsEngServicesProd:
   Fn::Equals:
   - Ref: OctopusDNSName
   - 'EngServicesProd'
 IsNotWebInstance: {"Fn::Or": [{"Condition": "IsIntwebUat"}, {"Condition": "IsEngServicesUat" }, {"Condition": "IsIntwebProd"}, {"Condition": "IsEngServicesProd" } ]}
 IsProd:
   Fn::Equals:
   - !Ref 'AWS::AccountId'
   - '733276539406'
Resources:
 ApplicationServerInstance:
   Type: AWS::EC2::Instance
   Metadata:
     cfn-lint:
       config:
         ignore_checks:
         # ignore 'Fn::Sub isn't needed because there are no variables' errors
         # because that's easier than defining content blocks differently based
         # on whether there's actually a substitution being performed within
         # the block or not
         - W1020
         - W1001
         - I3042
     AWS::CloudFormation::Init:
       config:
         files:
           c:\temp\Tentacle.exe:
             source: https://download.octopusdeploy.com/octopus/Octopus.Tentacle.5.0.13-x64.msi
           c:\temp\remove-ad-object.ps1:
             content: !Sub |
               $domain = "ociusprod.com"
               $password = (Get-SSMParameterValue -Name YOUR_WINDOWS_PASSWORD_FOR_AD -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force
               $credential = New-Object System.Management.Automation.PSCredential("ociusprod\nrediehs-prod",$password)
               Invoke-Command -ComputerName "aws-ad1.ociusprod.com" -Credential $credential -Scriptblock {Remove-ADComputer -Identity "${OctopusDNSName}" -Confirm:$False}
           c:\temp\join-domain.ps1:
             content: !Sub |
               $domain = "ociusprod.com"
               $password = (Get-SSMParameterValue -Name YOUR_WINDOWS_PASSWORD_FOR_AD -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force
               $credential = New-Object System.Management.Automation.PSCredential("ociusprod\nrediehs-prod",$password)
               # Join the domain and reboot'
               # Rename-computer –computername $ENV:COMPUTERNAME –newname "ComputerName" –domaincredential ociusprod\nrediehs-prod
               #Remove-ADComputer -Identity "${OctopusDNSName}" -Credential $credential
               Add-Computer -DomainName $domain -Credential $credential
               Restart-Computer -Force
           c:\temp\configure-tentacle.ps1:
           # Registers the instance with Octopus
             content: !Sub |
               $password = (Get-SSMParameterValue -Name ocius-octopus-service-account -WithDecryption $True).Parameters[0].Value
               $localipv4=invoke-restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4
               $OctopusRoles = "${OctopusRoles}".Split(",")
               Write-Host $localipv4
               #.\Tentacle.exe deregister-from --instance"${OctopusDNSName}" --Server="http://deploy.ocius.net" --apikey="API-B3133AIIBVZYVOAT6C8TKH2QIEK" --multiple
               .\Tentacle.exe create-instance --instance="${OctopusDNSName}" --config "C:\Octopus\Tentacle.config" --console
               .\Tentacle.exe new-certificate --instance="${OctopusDNSName}" --if-blank --console
               .\Tentacle.exe configure --instance="${OctopusDNSName}" --reset-trust --console
               .\Tentacle.exe configure --instance="${OctopusDNSName}" --home="C:\Octopus" --app="C:\Octopus\Applications" --port="10933" --console
               .\Tentacle.exe configure --instance="${OctopusDNSName}" --trust="171DCB7CA3CB64B92E3CC93A7DAB93CF88FE60EB" --console
               cmd.exe /c 'netsh advfirewall firewall add rule "name=Octopus Deploy Tentacle"  dir=in action=allow protocol=TCP localport=10933'
               $TentacleCmd = '.\Tentacle.exe register-with --instance="${OctopusDNSName}" --server "http://deploy.ocius.net"  --publicHostName=$localipv4 --apiKey="API-B3133AIIBVZYVOAT6C8TKH2QIEK" --comms-style TentaclePassive --console'
               $TentacleCmd += ' --environment "${OctopusEnvironment}"'
               foreach ($Role in $OctopusRoles) {
               $TentacleCmd += " --role $Role"
               }
               Invoke-Expression $TentacleCmd
               .\Tentacle.exe service --instance="${OctopusDNSName}" --install --user="ocius\eng-octopus" --password=$password --start --console
           c:\temp\add-network-drive.ps1:
           # Adds fsx file share for OciusProd.com
             content: !Sub |
               $DomainUser = "FSxServieAccount"
               $password = (Get-SSMParameterValue -Name fsx-service-account-password -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force
               $credential = New-Object System.Management.Automation.PSCredential($DomainUser,$password)
               New-PSDrive –Name “G” –PSProvider "FileSystem" –Root “\\amznfsxdezsxxxn.ociusprod.com” -Credential $credential –Persist


           c:\temp\add-domain-user-local.ps1:
             content: !Sub |
               $DomainUser = "eng-octopus"
               $User1 = "_Stage-ResidentImpor"
               $User2 = "_stage-cookie-servic"
               $User3 = "_Stage-SM-Process"
               $User4 = "_Stage-Boomi"
               $User5 = "_Stage-AuoApproval"
               $User6 = "_Stage-YardArchive"
               $User7 = "_Stage-Sample-Statem"
               $User8 = "_Stage-osg"
               $User9 = "_ENG-AutoApproval"
               $User10 = "_ENG-Boomi"
               $User11 = "_eng-cookie-service"
               $User12 = "_ENG-ResidentDImport"
               $User13 = "_ENG-Sample-Statemen"
               $User14 = "_ENG-YardiArchive"
               $User15 = "eng-osg"
               $User16 = "_ENG-SM-Process"
               $User17 = "extwebservice"
               $User18 = "intwebservice"
               $ESV = "EngServicesUat"
               $ESV1="EngServicesProd"
               $ESV2="intwebprod"
               $ESV3="web1prod"
               $ESV4="web3prod"
               $LocalGroup = "Administrators"
               $Domain = "ocius.net"
               $Domain2 = "ociusprod.com"
               $group = [ADSI]("WinNT://"+$env:COMPUTERNAME+"/$LocalGroup,group")
               $group.add("WinNT://$Domain/$DomainUser,user")
               if ( ("${OctopusDNSName}" -eq "$ESV3") -or ("${OctopusDNSName}" -eq "$ESV4") ) {
               $group.add("WinNT://$Domain2/$User17,user")
               .".\add-logon-as-service.ps1" "$User17"
               }
               if ( "${OctopusDNSName}" -eq "$ESV2" ) {
               $group.add("WinNT://$Domain2/$User18,user")
               .".\add-logon-as-service.ps1" "$User18"
               }
               if ( "${OctopusDNSName}" -eq "$ESV" ) {
               $group.add("WinNT://$Domain/$User1,user")
               $group.add("WinNT://$Domain/$User2,user")
               $group.add("WinNT://$Domain/$User3,user")
               $group.add("WinNT://$Domain/$User4,user")
               $group.add("WinNT://$Domain/$User5,user")
               $group.add("WinNT://$Domain/$User6,user")
               $group.add("WinNT://$Domain/$User7,user")
               $group.add("WinNT://$Domain/$User8,user")
               .".\add-logon-as-service.ps1" "$User1"
               .".\add-logon-as-service.ps1" "$User2"
               .".\add-logon-as-service.ps1" "$User3"
               .".\add-logon-as-service.ps1" "$User4"
               .".\add-logon-as-service.ps1" "$User5"
               .".\add-logon-as-service.ps1" "$User6"
               .".\add-logon-as-service.ps1" "$User7"
               .".\add-logon-as-service.ps1" "$User8"
               }
               if ( "${OctopusDNSName}" -eq "$ESV1") {
               $group.add("WinNT://$Domain/$User9,user")
               $group.add("WinNT://$Domain/$User10,user")
               $group.add("WinNT://$Domain/$User11,user")
               $group.add("WinNT://$Domain/$User12,user")
               $group.add("WinNT://$Domain/$User13,user")
               $group.add("WinNT://$Domain/$User14,user")
               $group.add("WinNT://$Domain/$User15,user")
               $group.add("WinNT://$Domain/$User16,user")
               .".\add-logon-as-service.ps1" "$User9"
               .".\add-logon-as-service.ps1" "$User10"
               .".\add-logon-as-service.ps1" "$User11"
               .".\add-logon-as-service.ps1" "$User12"
               .".\add-logon-as-service.ps1" "$User13"
               .".\add-logon-as-service.ps1" "$User14"
               .".\add-logon-as-service.ps1" "$User15"
               .".\add-logon-as-service.ps1" "$User16"
                }
           c:\temp\ocius-net-dns-add.ps1:
             content: !Sub |
               $password = (Get-SSMParameterValue -Name YOUR_WINDOWS_PASSWORD_FOR_AD -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force
               $credential = New-Object System.Management.Automation.PSCredential("ocius\nrediehs",$password)
               $dns = "batman.ocius.net" # Your DNS Server Name
               $Zone = "ocius.net" # Your Forward Lookup Zone Name
               $localipv4 = invoke-restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4
               Write-Host $localipv4
               $Name = "${OctopusDNSName}"
               $remotecomputer = "batman.ocius.net"
               Invoke-Command -ComputerName $remotecomputer -Credential $credential -ScriptBlock {param($Rdns,$RZone,$Rlocalipv4,$RName) Remove-DnsServerResourceRecord -ComputerName $Rdns -Name $RName -ZoneName $RZone -RRtype A -Force
               Add-DnsServerResourceRecordA -ComputerName $Rdns -Name $RName -IPv4Address $Rlocalipv4 -ZoneName $RZone} -ArgumentList $dns,$Zone,$localipv4,$Name
           c:\temp\ociusprod-net-dns-add.ps1:
             content: !Sub |
               $password = (Get-SSMParameterValue -Name YOUR_WINDOWS_PASSWORD_FOR_AD -WithDecryption $True).Parameters[0].Value | ConvertTo-SecureString -asPlainText -Force
               $credential = New-Object System.Management.Automation.PSCredential("ociusprod\nrediehs-prod",$password)
               $dns = "aws-ad1.ociusprod.com" # Your DNS Server Name
               $Zone = "ociusprod.com" # Your Forward Lookup Zone Name
               $localipv4 = invoke-restmethod -uri http://169.254.169.254/latest/meta-data/local-ipv4
               Write-Host $localipv4
               $Name = "${OctopusDNSName}"
               $remotecomputer = "aws-ad1.ociusprod.com"
               Invoke-Command -ComputerName $remotecomputer -Credential $credential -ScriptBlock {param($Rdns,$RZone,$Rlocalipv4,$RName) Remove-DnsServerResourceRecord -ComputerName $Rdns -Name $RName -ZoneName $RZone -RRtype A -Force
               Add-DnsServerResourceRecordA -ComputerName $Rdns -Name $RName -IPv4Address $Rlocalipv4 -ZoneName $RZone} -ArgumentList $dns,$Zone,$localipv4,$Name
               Restart-Computer -Force
           c:\temp\add-target-to-target-group.ps1:
             content: !Sub |
               param([string] $TargetGroupArn)
               import-module AWSPowerShell
               $instanceid = invoke-restmethod -uri http://169.254.169.254/latest/meta-data/instance-id
               #$TargetGroupArn = "arn:aws:elasticloadbalancing:us-east-2:997326064572:targetgroup/billing-target-group-uat/54c3748651691fb9"
               $thisInstance = New-Object Amazon.ElasticLoadBalancingV2.Model.TargetDescription
               $thisInstance.Id = $instanceId
               $thisInstance.Port = 80
               if ( "${OctopusDNSName}" -eq 'Web1Uat' -or "${OctopusDNSName}" -eq "Web3Uat" -or "${OctopusDNSName}" -eq "Web1Prod" -or "${OctopusDNSName}" -eq "Web3Prod" ) {
               Register-ELB2Target -TargetGroupArn "${TargetGroupArn}" -Target @( $thisInstance )
               }
           c:\temp\add-logon-as-service.ps1:
             content: !Sub |
               param($accountToAdd)
               if( [string]::IsNullOrEmpty($accountToAdd) ) {
                 Write-Host "no account specified"
                 exit
               }
               $sidstr = $null
               try {
                 $ntprincipal = new-object System.Security.Principal.NTAccount "$accountToAdd"
                 $sid = $ntprincipal.Translate([System.Security.Principal.SecurityIdentifier])
                 $sidstr = $sid.Value.ToString()
               } catch {
                 $sidstr = $null
               }


               Write-Host "Account: $($accountToAdd)" -ForegroundColor DarkCyan


               if( [string]::IsNullOrEmpty($sidstr) ) {
                 Write-Host "Account not found!" -ForegroundColor Red
                 exit -1
               }


               Write-Host "Account SID: $($sidstr)" -ForegroundColor DarkCyan


               $tmp = [System.IO.Path]::GetTempFileName()


               Write-Host "Export current Local Security Policy" -ForegroundColor DarkCyan
               secedit.exe /export /cfg "$($tmp)"


               $c = Get-Content -Path $tmp


               $currentSetting = ""


               foreach($s in $c) {
                 if( $s -like "SeServiceLogonRight*") {
                   $x = $s.split("=",[System.StringSplitOptions]::RemoveEmptyEntries)
                   $currentSetting = $x[1].Trim()
                 }
               }


               if( $currentSetting -notlike "*$($sidstr)*" ) {
                 Write-Host "Modify Setting ""Logon as a Service""" -ForegroundColor DarkCyan


                 if( [string]::IsNullOrEmpty($currentSetting) ) {
                   $currentSetting = "*$($sidstr)"
                 } else {
                   $currentSetting = "*$($sidstr),$($currentSetting)"
                 }


                 Write-Host "$currentSetting"


                 $outfile = @"
               [Unicode]
               Unicode=yes
               [Version]
               signature="`$CHICAGO`$"
               Revision=1
               [Privilege Rights]
               SeServiceLogonRight = $($currentSetting)
               "@


                 $tmp2 = [System.IO.Path]::GetTempFileName()




                 Write-Host "Import new settings to Local Security Policy" -ForegroundColor DarkCyan
                 $outfile | Set-Content -Path $tmp2 -Encoding Unicode -Force


                 #notepad.exe $tmp2
                 Push-Location (Split-Path $tmp2)


                 try {
                   secedit.exe /configure /db "secedit.sdb" /cfg "$($tmp2)" /areas USER_RIGHTS
                   #write-host "secedit.exe /configure /db ""secedit.sdb"" /cfg ""$($tmp2)"" /areas USER_RIGHTS "
                 } finally {
                   Pop-Location
                 }
               } else {
                 Write-Host "NO ACTIONS REQUIRED! Account already in ""Logon as a Service""" -ForegroundColor DarkCyan
               }


               Write-Host "Done." -ForegroundColor DarkCyan




         commands:
           01-remove-ad-object:
             command: powershell -ExecutionPolicy ByPass -File remove-ad-object.ps1
             cwd: 'C:\temp\'
           02-add-target-to-target-group:
             command: powershell.exe -ExecutionPolicy ByPass -File C:\temp\add-target-to-target-group.ps1  -force
             cwd: 'C:\temp\'
           03-rename-computer:
             command: !Sub powershell.exe Rename-Computer -NewName ${OctopusDNSName} -force -restart
             waitAfterCompletion: forever
           04-set-time-zone:
             command: powershell.exe -ExecutionPolicy Unrestricted -Command tzutil.exe /s "'Central Standard Time'"
           05-join-domain:
             command: powershell -ExecutionPolicy ByPass -File join-domain.ps1
             cwd: 'C:\temp\'
             waitAfterCompletion: forever
           06-install-tentacle:
             command: msiexec /i Tentacle.exe /quiet
             cwd: 'C:\temp\'
             waitAfterCompletion: 10
           07-register-tentacle:
             command: powershell -ExecutionPolicy ByPass -File C:\temp\configure-tentacle.ps1
             cwd: 'C:\Program Files\Octopus Deploy\Tentacle\'
             waitAfterCompletion: 10
           08-add-domain-account-local-group:
             command: powershell -ExecutionPolicy ByPass -File C:\temp\add-domain-user-local.ps1
             cwd: 'C:\temp\'
           09-add-ocius-net-dns:
             command: powershell -ExecutionPolicy ByPass -File ocius-net-dns-add.ps1
             cwd: 'C:\temp\'
           10-add-ociusprod-net-dns:
             command: powershell -ExecutionPolicy ByPass -File ociusprod-net-dns-add.ps1
             cwd: 'C:\temp\'
           # Step 10 needs to remain the last step in the process because it has a restart command for step 8 in it.


   Properties:
     UserData:
       "Fn::Base64":
         !Sub "<script>cfn-init.exe -v -s ${AWS::StackName} -r ApplicationServerInstance --region ${AWS::Region}</script>"
     KeyName: !Ref KeyPair
     ImageId: !Ref AmiVersion
     BlockDeviceMappings:
     - DeviceName: "/dev/sda1"
       Ebs:
         Encrypted: true
         KmsKeyId: !If [IsPci, 'alias/org-pci', 'alias/billing-non-pci']
     InstanceType: !Ref InstanceType
     SecurityGroupIds:
     - !If
         - IsWebInstance
         - !Ref SecurityGroupWeb
         - !Ref SecurityGroupNonWeb
     - !Ref SecurityGroup


     SubnetId:
       Fn::ImportValue: !Sub "${PrivateSubnet}"
     IamInstanceProfile: !Ref Ec2InstanceProfile
     Tags:
     -
       Key: CostCenter
       Value: BillingCostCenter
     -
       Key: Patch Group
       Value: Windows
     -
       Key: Name
       Value: !Ref OctopusDNSName
     -
       Key: BusinessUnit
       Value: !Ref Business
     -
       Key: Environment
       Value: !FindInMap [ EnvironmentMap, !Ref 'AWS::AccountId', Environment ]
     -
       Key: Role
       Value: !Ref Role
     -
       Key: Pci
       Value: !If [IsPci, 'true', 'false']


 SecurityGroupWeb:
   Type: AWS::EC2::SecurityGroup
   Condition: IsWebInstance
   Properties:
     GroupDescription: "Allow traffic from load balancer for web instances ONLY"
     GroupName: !Sub '${OctopusDNSName}SecurityGroupWeb'
     VpcId: !ImportValue vpc-id
     SecurityGroupIngress:
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         SourceSecurityGroupId: !FindInMap [ EnvironmentMap, !Ref 'AWS::AccountId', AlbSg ]
         Description: http-traffic-from-load-balancer
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         SourceSecurityGroupId: !FindInMap [ EnvironmentMap, !Ref 'AWS::AccountId', AlbSg ]
         Description: https-traffic-from-load-balancer


 SecurityGroupNonWeb:
   Type: AWS::EC2::SecurityGroup
   Condition: IsNotWebInstance
   Properties:
     GroupDescription: "Allow traffic from other sources for all NON-Web instances"
     GroupName: !Sub '${OctopusDNSName}SecurityGroupNonWeb'
     VpcId: !ImportValue vpc-id
     SecurityGroupIngress:
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         CidrIp: "10.100.0.0/20"
         Description: http-traffic-from-sandiego-network
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         CidrIp: "10.101.0.0/20"
         Description: http-traffic-from-sd-inscope-network
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         CidrIp: "192.168.4.0/24"
         Description: http-traffic-from-sd-vpn-network
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         CidrIp: "192.168.5.0/24"
         Description: http-traffic-from-sd-pci-vpn-network
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         CidrIp: "10.102.0.0/24"
         Description: https-traffic-from-sd-att-vpn-network
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         CidrIp: "10.100.100.0/22"
         Description: https-traffic-from-new-sd-vpn-network
       - IpProtocol: "tcp"
         FromPort: 80
         ToPort: 80
         CidrIp: !FindInMap [ EnvironmentMap, !Ref 'AWS::AccountId', CidrIp ]
         Description: http-traffic-from-local-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "10.1.0.0/24"
         Description: https-traffic-from-chicago-server-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "10.100.0.0/20"
         Description: https-traffic-from-sandiego-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "10.102.0.0/24"
         Description: https-traffic-from-sd-att-vpn-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "10.101.0.0/20"
         Description: https-traffic-from-sd-inscope-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "192.168.4.0/24"
         Description: https-traffic-from-sd-vpn-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "10.100.100.0/22"
         Description: https-traffic-from-new-sd-vpn-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "192.168.5.0/24"
         Description: https-traffic-from-sd-pci-vpn-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: "10.100.200.0/24"
         Description: https-traffic-from-new-sd-pci-vpn-network
       - IpProtocol: "tcp"
         FromPort: 443
         ToPort: 443
         CidrIp: !FindInMap [ EnvironmentMap, !Ref 'AWS::AccountId', CidrIp ]
         Description: https-traffic-from-local-network


 SecurityGroup:
   Type: AWS::EC2::SecurityGroup
   Properties:
     GroupDescription: "Allow SSH access from all IP addresses and HTTP from the load balancer only"
     GroupName: !Sub '${OctopusDNSName}SecurityGroup'
     VpcId: !ImportValue vpc-id
     SecurityGroupIngress:
       - IpProtocol: "tcp"
         FromPort: 10933
         ToPort: 10933
         CidrIp: "10.24.0.0/16"
         Description: octopus-traffic-from-org-account-cidr
       - IpProtocol: "tcp"
         FromPort: 3389
         ToPort: 3389
         CidrIp: "10.100.0.0/20"
         Description: rdp-traffic-from-sandiego-cidr-tcp
       - IpProtocol: "udp"
         FromPort: 3389
         ToPort: 3389
         CidrIp: "10.100.0.0/20"
         Description: rdp-traffic-from-sandiego-cidr-udp
       - IpProtocol: "tcp"
         FromPort: 135
         ToPort: 135
         CidrIp: "10.24.0.0/16"
         Description: ad-rpc-endpoint-mapper-port-from-shared-services-tcp
       - IpProtocol: "udp"
         FromPort: 135
         ToPort: 135
         CidrIp: "10.24.0.0/16"
         Description: ad-rpc-endpoint-mapper-port-from-shared-services-udp
       - IpProtocol: "tcp"
         FromPort: 137
         ToPort: 139
         CidrIp: "10.24.0.0/16"
         Description: ad-netbios-service-from-shared-services-tcp
       - IpProtocol: "udp"
         FromPort: 137
         ToPort: 139
         CidrIp: "10.24.0.0/16"
         Description: ad-netbios-service-from-shared-services-udp
       - IpProtocol: "udp"
         FromPort: 135
         ToPort: 139
         CidrIp: "10.100.100.0/22"
         Description: smb-udp-access-sd-okta-vpn
       - IpProtocol: "udp"
         FromPort: 135
         ToPort: 139
         CidrIp: "10.102.0.0/24"
         Description: smb-udp-access-sd-att-vpn-network
       - IpProtocol: "tcp"
         FromPort: 135
         ToPort: 139
         CidrIp: "10.100.100.0/22"
         Description: smb-tcp-access-sd-okta-vpn
       - IpProtocol: "tcp"
         FromPort: 135
         ToPort: 139
         CidrIp: "10.102.0.0/24"
         Description: smb-tcp-access-sd-att-vpn-network
       - IpProtocol: "tcp"
         FromPort: 445
         ToPort: 445
         CidrIp: "10.100.100.0/22"
         Description: smb-tcp-access-sd-okta-vpn
       - IpProtocol: "tcp"
         FromPort: 445
         ToPort: 445
         CidrIp: "10.102.0.0/24"
         Description: smb-tcp-access-sd-att-vpn-network
       - IpProtocol: "udp"
         FromPort: 445
         ToPort: 445
         CidrIp: "10.100.100.0/22"
         Description: smb-udp-access-sd-okta-vpn
       - IpProtocol: "udp"
         FromPort: 445
         ToPort: 445
         CidrIp: "10.102.0.0/24"
         Description: smb-udp-access-sd-att-vpn-network
       - IpProtocol: "tcp"
         FromPort: 445
         ToPort: 445
         CidrIp: "10.24.0.0/16"
         Description: ad-smb-service-from-shared-services-tcp
       - IpProtocol: "udp"
         FromPort: 445
         ToPort: 445
         CidrIp: "10.24.0.0/16"
         Description: ad-smb-service-from-shared-services-udp
       - IpProtocol: "tcp"
         FromPort: 3286
         ToPort: 3286
         CidrIp: "10.24.0.0/16"
         Description: ad-ldap-global-catalog-datagram-service-from-shared-services
       - IpProtocol: "tcp"
         FromPort: 88
         ToPort: 88
         CidrIp: "10.24.0.0/16"
         Description: ad-kerberos-service-from-shared-services-tcp
       - IpProtocol: "udp"
         FromPort: 88
         ToPort: 88
         CidrIp: "10.24.0.0/16"
         Description: ad-kerberos-service-from-shared-services-udp
       - IpProtocol: "tcp"
         FromPort: 53
         ToPort: 53
         CidrIp: "10.24.0.0/16"
         Description: ad-dns-service-from-shared-services-tcp
       - IpProtocol: "udp"
         FromPort: 53
         ToPort: 53
         CidrIp: "10.24.0.0/16"
         Description: ad-dns-service-from-shared-services-udp
       - IpProtocol: "tcp"
         FromPort: 1512
         ToPort: 1512
         CidrIp: "10.24.0.0/16"
         Description: ad-wins-service-from-shared-services-tcp
       - IpProtocol: "udp"
         FromPort: 1512
         ToPort: 1512
         CidrIp: "10.24.0.0/16"
         Description: ad-wins-resolution-service-from-shared-services-udp
       - IpProtocol: "tcp"
         FromPort: 42
         ToPort: 42
         CidrIp: "10.24.0.0/16"
         Description: ad-wins-replication-service-from-shared-services-tcp
       - IpProtocol: "udp"
         FromPort: 42
         ToPort: 42
         CidrIp: "10.24.0.0/16"
         Description: ad-wins-replication-service-from-shared-services-udp
       - IpProtocol: "-1"
         FromPort: "-1"
         ToPort: "-1"
         SourceSecurityGroupId: !ImportValue NessusSecurityGroupId
         Description: all ports from Nessus
       - IpProtocol: "udp"
         FromPort: 3389
         ToPort: 3389
         CidrIp: "10.100.100.0/22"
         Description: rdp-traffic-from-sd-okta-vpn-cidr-udp
       - IpProtocol: "udp"
         FromPort: 3389
         ToPort: 3389
         CidrIp: "10.102.0.0/24"
         Description: rdp-traffic-from-sd-att-vpn-network-udp
       - IpProtocol: "tcp"
         FromPort: 3389
         ToPort: 3389
         CidrIp: "10.100.100.0/22"
         Description: rdp-traffic-from-sd-okta-vpn-cidr-tcp
       - IpProtocol: "tcp"
         FromPort: 3389
         ToPort: 3389
         CidrIp: "10.102.0.0/24"
         Description: rdp-traffic-from-sd-att-vpn-network-tcp
       - IpProtocol: icmp
         FromPort: 8
         ToPort: -1
         CidrIp: "10.100.100.0/22"
         Description: ping-traffic-from-sd-okta-vpn-cidr
       - IpProtocol: icmp
         FromPort: 8
         ToPort: -1
         CidrIp: "10.102.0.0/24"
         Description: ping-traffic-from-sd-att-vpn-network
     Tags:
     -
       Key: Name
       Value: Ec2IngressSecurityGroup


 Ec2InstanceRole:
   Type: AWS::IAM::Role
   Properties:
     AssumeRolePolicyDocument:
       Version: 2012-10-17
       Statement:
       - Effect: Allow
         Principal:
           Service:
           - "ec2.amazonaws.com"
         Action:
         - sts:AssumeRole
     Path: /
     ManagedPolicyArns:
       - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
       - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
       - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy


 Ec2InstanceProfile:
   Type: AWS::IAM::InstanceProfile
   Properties:
     Path: /
     Roles:
       - !Ref Ec2InstanceRole


 KmsDecryptPolicy:
   Type: AWS::IAM::Policy
   Properties:
     PolicyName: "DecryptWithKMS"
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
         -
           Effect: "Allow"
           Action: "kms:Decrypt"
           Resource: "*"
     Roles:
     - !Ref Ec2InstanceRole


 AddTargetPolicy:
   Type: AWS::IAM::Policy
   Properties:
     PolicyName: "AddTargetToTargetGroup"
     PolicyDocument:
       Version: "2012-10-17"
       Statement:
         -
           Effect: "Allow"
           Action: "elasticloadbalancing:RegisterTargets"
           Resource: "*"
     Roles:
     - !Ref Ec2InstanceRole


 ApplicationDDriveVolume:
   Type: AWS::EC2::Volume
   Properties:
     Size: 100
     Encrypted: true
     KmsKeyId: !If [IsPci, 'alias/org-pci', 'alias/billing-non-pci']
     AvailabilityZone: !GetAtt ApplicationServerInstance.AvailabilityZone
   DeletionPolicy: Snapshot
   UpdateReplacePolicy: Delete


 ApplicationDDriveVolumeMount:
   Type: AWS::EC2::VolumeAttachment
   Properties:
     InstanceId: !Ref ApplicationServerInstance
     VolumeId: !Ref ApplicationDDriveVolume
     Device: xvdz
 ApplicationDDriveVolumeMount1:
   Type: AWS::EC2::VolumeAttachment
   Condition: IsProd
   Properties:
     InstanceId: !Ref ApplicationServerInstance
     VolumeId: vol-03daaba50a8f1ba37
     Device: xvdh


 UpdateSharedServicesDNS:
   Type: AWS::CloudFormation::CustomResource
   Properties:
     ServiceToken: arn:aws:lambda:us-east-2:489055453904:function:ocius-prod-update-dns
     InstanceId: AWS::EC2:Instance
     PrivateIp: !GetAtt ApplicationServerInstance.PrivateIp
     DnsPrefix: !Ref OctopusDNSName


 StatusCheckFailedInstance:
   Type: 'AWS::CloudWatch::Alarm'
   Properties:
     ActionsEnabled: true
     AlarmActions:
       - !ImportValue billing-alarm-instances-alb
     AlarmDescription: !Sub "${OctopusDNSName}-StatusCheckFailedInstance"
     AlarmName: !Sub "${OctopusDNSName}-StatusCheckFailedInstance"
     ComparisonOperator: GreaterThanOrEqualToThreshold
     Dimensions:
       - Name: InstanceId
         Value: !Ref ApplicationServerInstance
     EvaluationPeriods: 1
     MetricName: StatusCheckFailed_Instance
     Namespace: AWS/EC2
     Period: 60
     Statistic: Maximum #SampleCount, Average, Sum, Minimum, or Maximum
     Threshold: 1
     TreatMissingData: missing


 StatusCheckFailedSystem:
   Type: 'AWS::CloudWatch::Alarm'
   Properties:
     ActionsEnabled: true
     AlarmActions:
       - !ImportValue billing-alarm-instances-alb
     AlarmDescription: !Sub "${OctopusDNSName}-StatusCheckFailedSystem"
     AlarmName: !Sub "${OctopusDNSName}-StatusCheckFailedSystem"
     ComparisonOperator: GreaterThanOrEqualToThreshold
     Dimensions:
       - Name: InstanceId
         Value: !Ref ApplicationServerInstance
     EvaluationPeriods: 2
     MetricName: StatusCheckFailed_System˜
     Namespace: AWS/EC2
     Period: 60
     Statistic: Maximum #SampleCount, Average, Sum, Minimum, or Maximum
     Threshold: 1
     TreatMissingData: missing


 #SystemLogGroup:
 #  Type: AWS::Logs::LogGroup
 #  Properties:
 #    LogGroupName: !Sub "/Ec2/${OctopusDNSName}/System"


 # ErrorSyslogMetricFilter:
 #   Type: AWS::Logs::MetricFilter
 #   Properties:
 #     FilterPattern: "ERROR"
 #     LogGroupName: !Ref SystemLogGroup
 #     MetricTransformations:
 #       - MetricValue: "1"
 #         MetricNamespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
 #         MetricName: SyslogErrorLogCount


#  CriticalSyslogMetricFilter:
#    Type: AWS::Logs::MetricFilter
#    Properties:
#      FilterPattern: "CRITICAL"
#      LogGroupName: !Sub "/Ec2/${OctopusDNSName}/System"
#      MetricTransformations:
#        - MetricValue: "1"
#          MetricNamespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
#          MetricName: SyslogCriticalLogCount


 # ErrorSyslogAlarm:
 #   Type: "AWS::CloudWatch::Alarm"
 #   Properties:
 #     ActionsEnabled: true
 #     AlarmActions:
 #       - !ImportValue billing-alarm-instances-alb
 #     AlarmDescription: !Sub "${OctopusDNSName} Syslog Error Logs"
 #     AlarmName: !Sub "${OctopusDNSName}-Syslog-Error-Logs"
 #     ComparisonOperator: GreaterThanThreshold
 #     EvaluationPeriods: 1
 #     MetricName: SyslogErrorLogCount
 #     Namespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
 #     Period: 60
 #     Statistic: SampleCount #SampleCount, Average, Sum, Minimum, or Maximum
 #     Threshold: 2
 #     TreatMissingData: notBreaching


#  CriticalSyslogAlarm:
#    Type: "AWS::CloudWatch::Alarm"
#    Properties:
#      ActionsEnabled: true
#      AlarmActions:
#        - !ImportValue billing-alarm-instances-alb
#      AlarmDescription: !Sub "${OctopusDNSName} Syslog Critical Logs"
#      AlarmName: !Sub "${OctopusDNSName}-Syslog-Critical-Logs"
#      ComparisonOperator: GreaterThanThreshold
#      EvaluationPeriods: 1
#      MetricName: SyslogCriticalLogCount
#      Namespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
#      Period: 60
#      Statistic: SampleCount #SampleCount, Average, Sum, Minimum, or Maximum
#      Threshold: 2
#      TreatMissingData: notBreaching


 # ApplicationLogGroup:
 #   Type: AWS::Logs::LogGroup
 #   Properties:
 #     LogGroupName: !Sub "/Ec2/${OctopusDNSName}/Application"


 # # ErrorAppMetricFilter:
 # #   Type: AWS::Logs::MetricFilter
 # #   Properties:
 # #     FilterPattern: "ERROR"
 # #     LogGroupName: !Ref ApplicationLogGroup
 # #     MetricTransformations:
 # #       - MetricValue: "1"
 # #         MetricNamespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
 # #         MetricName: AppErrorLogCount


 # # CriticalAppMetricFilter:
 # #   Type: AWS::Logs::MetricFilter
 # #   Properties:
 # #     FilterPattern: '"ERROR" - "plapi"'
 # #     LogGroupName: !Ref ApplicationLogGroup
 # #     MetricTransformations:
 # #       - MetricValue: "1"
 # #         MetricNamespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
 # #         MetricName: AppCriticalLogCount


 # ErrorAppAlarm:
 #   Type: "AWS::CloudWatch::Alarm"
 #   Properties:
 #     ActionsEnabled: true
 #     AlarmActions:
 #       - !ImportValue billing-alarm-instances-alb
 #     AlarmDescription: !Sub "${OctopusDNSName} Applog Error Logs"
 #     AlarmName: !Sub "${OctopusDNSName}-App-Error-Logs"
 #     ComparisonOperator: GreaterThanThreshold
 #     EvaluationPeriods: 1
 #     MetricName: AppErrorLogCount
 #     Namespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
 #     Period: 60
 #     Statistic: SampleCount #SampleCount, Average, Sum, Minimum, or Maximum
 #     Threshold: 5
 #     TreatMissingData: notBreaching


 # CriticalAppAlarm:
 #   Type: "AWS::CloudWatch::Alarm"
 #   Properties:
 #     ActionsEnabled: true
 #     AlarmActions:
 #       - !ImportValue billing-alarm-instances-alb
 #     AlarmDescription: !Sub "${OctopusDNSName} App Critical Logs"
 #     AlarmName: !Sub "${OctopusDNSName}-App-Critical-Logs"
 #     ComparisonOperator: GreaterThanThreshold
 #     EvaluationPeriods: 1
 #     MetricName: AppCriticalLogCount
 #     Namespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
 #     Period: 60
 #     Statistic: SampleCount #SampleCount, Average, Sum, Minimum, or Maximum
 #     Threshold: 5
 #     TreatMissingData: notBreaching


 HttpLogGroup:
   Type: AWS::Logs::LogGroup
   Properties:
     LogGroupName: !Sub "/Ec2/${OctopusDNSName}/Http"
   DeletionPolicy: Delete
   UpdateReplacePolicy: Delete


 Http500MetricFilter:
   Type: AWS::Logs::MetricFilter
   Properties:
     FilterPattern: "[date, time, c_ip, c_port, s_ip, s_port, cs_version, cs_method, cs_uri, sc_status = 5*, s_siteid, s_reason, s_queuename]"
     LogGroupName: !Ref HttpLogGroup
     MetricTransformations:
       - MetricValue: "1"
         MetricNamespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
         MetricName: Http500ErrorCount


 Http500ErrorAlarm:
   Type: "AWS::CloudWatch::Alarm"
   Properties:
     ActionsEnabled: true
     AlarmActions:
       - !ImportValue billing-alarm-instances-alb
     AlarmDescription: !Sub "${OctopusDNSName} Http 500 Error Logs"
     AlarmName: !Sub "${OctopusDNSName}-Http-500-Error-Logs"
     ComparisonOperator: GreaterThanThreshold
     EvaluationPeriods: 1
     MetricName: Http500ErrorCount
     Namespace: !Sub "PayleaseBilling/EC2-${OctopusDNSName}"
     Period: 60
     Statistic: SampleCount #SampleCount, Average, Sum, Minimum, or Maximum
     Threshold: 5
     TreatMissingData: notBreaching


 CPUInstanceAlarm:
   Type: 'AWS::CloudWatch::Alarm'
   Properties:
     ActionsEnabled: true
     AlarmActions:
       - !ImportValue billing-alarm-instances-alb
     AlarmDescription: !Sub "${OctopusDNSName}-CPUInstanceAlarm"
     AlarmName: !Sub "${OctopusDNSName}-CPUInstanceAlarm"
     ComparisonOperator: GreaterThanOrEqualToThreshold
     Dimensions:
       - Name: InstanceId
         Value: !Ref ApplicationServerInstance
     EvaluationPeriods: 1
     MetricName: CPUUtilization
     Namespace: AWS/EC2
     Period: 60
     Statistic: Average #SampleCount, Average, Sum, Minimum, or Maximum
     Threshold: 90
     TreatMissingData: notBreaching


 CDrivePercentFreeAlarm:
   Type: 'AWS::CloudWatch::Alarm'
   Properties:
     ActionsEnabled: true
     AlarmActions:
       - !ImportValue billing-alarm-instances-alb
     AlarmDescription: !Sub "${OctopusDNSName}-CDrivePercentFreeAlarm"
     AlarmName: !Sub "${OctopusDNSName}-CDrivePercentFreeAlarm"
     ComparisonOperator: LessThanOrEqualToThreshold
     Dimensions:
       - Name: InstanceId
         Value: !Ref ApplicationServerInstance
       - Name: instance
         Value: "C:"
       - Name: objectname
         Value: "LogicalDisk"
       - Name: ImageId
         Value: !Ref AmiVersion
       - Name: InstanceType
         Value: !Ref InstanceType
     EvaluationPeriods: 1
     MetricName: "LogicalDisk % Free Space"
     Namespace: CWAgent
     Period: 60
     Statistic: Maximum #SampleCount, Average, Sum, Minimum, or Maximum
     Threshold: 10
     TreatMissingData: notBreaching


 DDrivePercentFreeAlarm:
   Type: 'AWS::CloudWatch::Alarm'
   Properties:
     ActionsEnabled: true
     AlarmActions:
       - !ImportValue billing-alarm-instances-alb
     AlarmDescription: !Sub "${OctopusDNSName}-DDrivePercentFreeAlarm"
     AlarmName: !Sub "${OctopusDNSName}-DDrivePercentFreeAlarm"
     ComparisonOperator: LessThanOrEqualToThreshold
     Dimensions:
       - Name: InstanceId
         Value: !Ref ApplicationServerInstance
       - Name: instance
         Value: "D:"
       - Name: objectname
         Value: "LogicalDisk"
       - Name: ImageId
         Value: !Ref AmiVersion
       - Name: InstanceType
         Value: !Ref InstanceType
     EvaluationPeriods: 1
     MetricName: "LogicalDisk % Free Space"
     Namespace: CWAgent
     Period: 60
     Statistic: Maximum #SampleCount, Average, Sum, Minimum, or Maximum
     Threshold: 10
     TreatMissingData: notBreaching


 MemoryPercentCommittedAlarm:
   Type: 'AWS::CloudWatch::Alarm'
   Properties:
     ActionsEnabled: true
     AlarmActions:
       - !ImportValue billing-alarm-instances-alb
     AlarmDescription: !Sub "${OctopusDNSName}-MemoryPercentCommittedAlarm"
     AlarmName: !Sub "${OctopusDNSName}-MemoryPercentCommittedAlarm"
     ComparisonOperator: GreaterThanOrEqualToThreshold
     Dimensions:
       - Name: InstanceId
         Value: !Ref ApplicationServerInstance
       - Name: objectname
         Value: Memory
       - Name: ImageId
         Value: !Ref AmiVersion
       - Name: InstanceType
         Value: !Ref InstanceType
     EvaluationPeriods: 1
     MetricName: "Memory % Committed Bytes In Use"
     Namespace: CWAgent
     Period: 60
     Statistic: Average #SampleCount, Average, Sum, Minimum, or Maximum
     Threshold: 75
     TreatMissingData: notBreaching
